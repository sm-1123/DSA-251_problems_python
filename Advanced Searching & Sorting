P1: Square Root of a number
def floorSqrt(n):
   # write your code logic here .
   if n == 0 or n == 1:

      return n

   l = 1

   r = n//2

   ans = 0

   while(l <= r):

      mid = (l + r)//2

      if mid * mid <= n:

         l = mid + 1

         ans = mid

      else:

         r = mid - 1

   return ans         

n= int(input())
print(floorSqrt(n))

P2:Search In Rotated Sorted Array
def search(arr, target) :
    # Write your code here.
    l = 0

    r = len(arr) - 1

    while(l < r):

        mid = (l + r)//2

        if arr[0] <= arr[mid]:

            if arr[0] <= target <= arr[mid]:

                r = mid

            else:

                l = mid + 1

        else:        

            if arr[mid] < target <= arr[r]:

                l = mid + 1

            else:

                r = mid
P3:Single Element in a Sorted Array
def singleNonDuplicate(arr):
    # Write your code here
    n = len(arr)

    if n == 1:

        return arr[0]

    if arr[0] != arr[1]:

        return arr[0]

    if arr[n-1] != arr[n-2]:

        return arr[n-1]

    low = 1

    high = n - 2        

    while(low <= high):

        mid = (low + high)//2

        if arr[mid] != arr[mid + 1] and arr[mid] != arr[mid - 1]:

            return arr[mid]

        if (mid % 2 == 1 and arr[mid] == arr[mid - 1]) or (mid % 2 == 0 and arr[mid] == arr[mid + 1]):

            low = mid + 1

        else:

            high = mid -1

    return -1                  


    pass
P4:Matrix Median
def upper_bound(arr, x, n):

    low, high = 0, n - 1

    ans = n

    while(low <= high):

        mid = (low + high)//2

        if arr[mid] > x:

            ans = mid

            high = mid - 1

        else:

            low = mid + 1

    return ans            


def cnt_small_equals(matrix, n, m, x):

    cnt = 0

    for i in range(n):

        cnt += upper_bound(matrix[i], x, m)

    return cnt    


def getMedian(matrix):
    # Write your code here.
    n, m = len(matrix), len(matrix[0])

    low, high = matrix[0][0], 0

    for i in range(n):

        low = min(low, matrix[i][0])

        high = max(high, matrix[i][m - 1])

    required = (n * m )//2

    while low <= high:

        mid = (low + high)//2

        small_equals = cnt_small_equals(matrix, n, m, mid)

        if small_equals <= required:

            low = mid + 1

        else:

            high = mid - 1

    return low            
     

        


    pass



    return l if arr[l] == target else -1
    
                        
    pass
