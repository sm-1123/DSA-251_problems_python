P1:Search In BST[TC:O(H),SC:O(H)]
def searchInBST(root, x):
    # Write your code here.
    if root is None:

        return False

    elif root.data == x:

        return True    

    elif root.data < x:

        return searchInBST(root.right, x)

    return searchInBST(root.left, x)       
P2: LCA of Two Nodes In A BST[TC:O(H),SC:(H)-RECURSION STACK SPACE]
def LCAinaBST(root, P, Q):

    # Write your code here
    if root == None:

        return None

    curr = root.data    

    if curr < P.data and curr < Q.data:

        return LCAinaBST(root.right, P, Q)

    if curr > P.data and curr > Q.data:

        return LCAinaBST(root.left, P, Q)

    return root            
    # P and Q are the given nodes
    # Return LCA node
    pass
P3:Partial BST[TC-O(N),SC-O(H)]
def BSTornot(node, mini, maxi):

    if node == None:

        return True

    if node.data < mini or node.data > maxi:

        return False

    return BSTornot(node.left, mini, node.data) and BSTornot(node.right, node.data, maxi)            
        
def validateBST(root):
    
    #Write your code here

    return BSTornot(root, int_min, int_max)
P4:Kth smallest node in BST[TC-O(N),SC-O(N)]
def inorder(node, counter, k , k_smallest):

    if not node or counter[0] >= k:

        return

    inorder(node.left, counter, k, k_smallest)

    counter[0] += 1

    if counter[0] == k:

        k_smallest[0] = node.data

        return

    inorder(node.right, counter, k, k_smallest)
    
            

def kthSmallest(root: Optional[TreeNode], k: int) -> int:
    
    # Write the code here.
    k_smallest = [float('inf')]

    counter = [0]

    inorder(root, counter, k, k_smallest)

    return k_smallest[0]

    pass

    

