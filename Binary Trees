P1:Preorder Binary Tree
def preOrder(root):[TC-O(N), SC-1.O(N){WORST CASE-Skewed Tree}, 
                             2.O(logn){on average balanced tree}]
	# Your code goes here
    if root != None:

        print(root.data, end=" ")

        preOrder(root.left)

        preOrder(root.right)
P2:Inorder Traversal:[TC-O(N), SC-1.O(N){WORST CASE-Skewed Tree}, 
                             2.O(logn){on average balanced tree}]
def getInOrderTraversal(root):
    # Write your code here
    ans = []

    if root:
        
        ans.extend(getInOrderTraversal(root.left))
        
        ans.append(root.data)
        
        ans.extend(getInOrderTraversal(root.right))
               
    return ans

    pass
P3:Postorder Traversal:[TC-O(N), SC-1.O(N){WORST CASE-Skewed Tree}, 
                             2.O(logn){on average balanced tree}]
def postorderTraversal(root) -> List[int]:
    # Write your code here.
    res = []

    if root:

        res.extend(postorderTraversal(root.left))

        res.extend(postorderTraversal(root.right))

        res.append(root.val)
        
    return res
        
    pass
P4:Diameter Of Binary Tree
def diameterOfBinaryTree(root: TreeNode) -> int:
    # Write your code here.
    diameter = [0]

    calculateHeight(root, diameter)

    return diameter[0]

    pass

def calculateHeight(node, diameter):

    if not node:

        return 0

    lh = calculateHeight(node.left, diameter)

    rh = calculateHeight(node.right, diameter)

    diameter[0] = max(diameter[0], lh + rh)

    return 1 + max(lh, rh)
P5:LCA Of Binary Tree[TC:O(N),SC:O(N)]
def lowestCommonAncestor(root, x: int, y: int) -> int:
	# Write your code here.
    if root is None:

        return None

    if root.data == x or root.data == y:

        return root.data

    left = lowestCommonAncestor(root.left, x, y)

    right = lowestCommonAncestor(root.right, x, y)

    if left is not None and right is not None:

        return root.data

    return left if left is not None else right      
P6:Level Order Traversal
def getLevelOrder(root):

    #   Write your code here
    ans = []

    if not root:

        return ans

    q = deque()

    q.append(root)

    while q:

        size = len(q)

        for i in range(size):

            node = q.popleft()

            ans.append(node.val)

            if node.left:

                q.append(node.left)

            if node.right:

                q.append(node.right)

    return ans                



    pass


            

