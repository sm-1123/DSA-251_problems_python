---------------------------------date:04/06/2024-------------------------------------------------
P1:Count Ways To Reach The N-th Stairs[TC:O(N),SC:O(1)]
def countDistinctWays(nStairs: int) -> int:
    #  Write your code here.
    mod = 1e9 + 7
        
    prev2 = 1

    prev = 1

    for i in range(2, nStairs+1):

        curr_i = int((prev2 + prev)%mod)

        prev2 = prev

        prev = curr_i

    return prev

P2:House Robber[TC:O(N),SC:O(1)]
def maxMoneyLooted(houses, n) :
    #Your code goes here
    prev = houses[0]

    prev2 = 0

    for i in range(1, n):

        take = houses[i]

        if i>1:

            take += prev2

        notTake = 0 + prev

        curr_i = max(take, notTake)

        prev2 = prev

        prev = curr_i

    return prev 
-----------------------------date:05/06/2024---------------------------------------
P3: Rod cutting problem[TRY AGAIN]
def cutRod(price, n):

    curr = [0] * (n + 1)

    for i in range(1, n+1):

        curr[i] = i * price[0]

        for i in range(1, n):

            for j in range(n+1):

                if i+1 <= j:

                    curr[j] = max(curr[j], price[i]+curr[j-(i+1)])

    return curr[n]   
---------------------date:06/06/2024--------------------------------------------------------
P4:Minimum Jumps[TC:O(N^2),SC:O(N)]
SOL1-PASS 6 TEST CASE OUT OFF 11-TRY AGAIN
import sys
def minimumJumps(arr, n):

    if n == 0 or arr[0] == 0:

        return sys.maxsize

    jump = [0] + [sys.maxsize] * (n-1)

    for i in range(1, n):

        for j in range(i):

            if i <= j + arr[j] and jump[j] != sys.maxsize:

                jump[i] = min(jump[i], jump[j] + 1)          

    if jump[n-1] == sys.maxsize:

        return -1
SOL2:
    return jump[n-1] 
P5: Longest Increasing Subsequence[TC:O(N^2),SC:O(N^2)+O(N)]
def longestLen(arr, n, ind, prevInd, dp):

    if ind == n:

        return 0

    if dp[ind][prevInd + 1] != -1:

        return dp[ind][prevInd + 1]

    notTake = 0 + longestLen(arr, n, ind+1, prevInd, dp)

    take = 0

    if prevInd == -1 or arr[ind] > arr[prevInd]:

        take = 1 + longestLen(arr, n, ind+1, ind, dp)

    dp[ind][prevInd + 1] = max(take, notTake)

    return dp[ind][prevInd + 1]            

def longestIncreasingSubsequence(arr, n) :

    dp = [[-1 for _ in range(n+1)] for _ in range(n)]
	# Your code goes here
    return longestLen(arr, n, 0, -1, dp)
