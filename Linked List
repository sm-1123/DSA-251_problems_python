P1:Insert Node At The Beginning
class Node:
    def __init__(self, data=0, next=None):
        self.data = data
        self.next = next


# Do not change code above.


def insertAtFirst(list: Node, newValue: int) -> Node:
    # Write your code here
    new_node = Node(newValue)

    new_node.next = list

    list = new_node

    return list
    
    pass
P2:Delete Node Of Linked List
class Node:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


# Please do not change code above.


def deleteLast(list: Node) -> Node:
    # Write your code here
    current = list

    prev = None

    while current.next is not None:

        prev = current

        current = current.next

    prev.next = None

    return list    


    pass
P3:Search in a Linked List
def searchInLinkedList(head, k):
    # Your code goes here.
    while head:

        if head.data == k:

            return 1

        head = head.next    

    return 0             
P4:Reverse Linked List
def reverseLinkedList(head):
    # Write your code here.
    if head == None:

        return head

    current = head

    previous_top = None

    while(current):

        next_to_current = current.next

        current.next = previous_top

        previous_top = current

        current = next_to_current

    head = previous_top

    return head    



    pass
P5:Middle Of Linked List[Failed 1 test case]
def findMiddle(head):
    # Write your code here
    fast = head

    slow = head

    while fast is not None and fast.next is not None:

        slow = slow.next

        fast = fast.next.next

    return slow         
    # head denoted head of linked list
    pass
P7:Add Two Numbers[TC:O(MAX(M,N))==SC]
class Node:
    def __init__(self, data=0, next=None):
        self.data = data
        self.next = next


# Don't change the code above.


def addTwoNumbers(head1: Node, head2: Node) -> Node:
    # Write your code here.
    dummynode = Node(-1)
    carry = 0
    curr = dummynode
    while ((head1 != None or head2 != None) or carry):
        sum = 0
        if head1 != None:
            sum += head1.data
            head1 = head1.next
        if head2 != None:
            sum += head2.data
            head2 = head2.next
        sum += carry    
        carry = sum//10
        curr.next = Node(sum%10)
        curr = curr.next


    return dummynode.next                

    pass
P8:Insertion Sort in Linked List
class Node:
	def __init__(self, data):
	    self.data = data
	    self.next = None


def insertionSortLL(head):
	# Write your code here
	dummy = Node(1000000000)

	while(head):

		next = head.next

		temp = dummy

		while temp.next and temp.next.data < head.data:

			temp = temp.next

		head.next = temp.next

		temp.next = head

		head = next

	return dummy.next		


	# Return the head of the updated(sorted) linked list
	pass




