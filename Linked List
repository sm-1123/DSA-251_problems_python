P1:Insert Node At The Beginning
class Node:
    def __init__(self, data=0, next=None):
        self.data = data
        self.next = next


# Do not change code above.


def insertAtFirst(list: Node, newValue: int) -> Node:
    # Write your code here
    new_node = Node(newValue)

    new_node.next = list

    list = new_node

    return list
    
    pass
P2:Delete Node Of Linked List
class Node:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


# Please do not change code above.


def deleteLast(list: Node) -> Node:
    # Write your code here
    current = list

    prev = None

    while current.next is not None:

        prev = current

        current = current.next

    prev.next = None

    return list    


    pass
P3:Search in a Linked List
def searchInLinkedList(head, k):
    # Your code goes here.
    while head:

        if head.data == k:

            return 1

        head = head.next    

    return 0             
P4:Reverse Linked List
def reverseLinkedList(head):
    # Write your code here.
    if head == None:

        return head

    current = head

    previous_top = None

    while(current):

        next_to_current = current.next

        current.next = previous_top

        previous_top = current

        current = next_to_current

    head = previous_top

    return head    



    pass
P5:Middle Of Linked List[Failed 1 test case]
def findMiddle(head):
    # Write your code here
    fast = head

    slow = head

    while fast is not None and fast.next is not None:

        slow = slow.next

        fast = fast.next.next

    return slow         
    # head denoted head of linked list
    pass
P7:Add Two Numbers[TC:O(MAX(M,N))==SC]
class Node:
    def __init__(self, data=0, next=None):
        self.data = data
        self.next = next


# Don't change the code above.


def addTwoNumbers(head1: Node, head2: Node) -> Node:
    # Write your code here.
    dummynode = Node(-1)
    carry = 0
    curr = dummynode
    while ((head1 != None or head2 != None) or carry):
        sum = 0
        if head1 != None:
            sum += head1.data
            head1 = head1.next
        if head2 != None:
            sum += head2.data
            head2 = head2.next
        sum += carry    
        carry = sum//10
        curr.next = Node(sum%10)
        curr = curr.next


    return dummynode.next                

    pass
P8:Insertion Sort in Linked List
class Node:
	def __init__(self, data):
	    self.data = data
	    self.next = None


def insertionSortLL(head):
	# Write your code here
	dummy = Node(1000000000)

	while(head):

		next = head.next

		temp = dummy

		while temp.next and temp.next.data < head.data:

			temp = temp.next

		head.next = temp.next

		temp.next = head

		head = next

	return dummy.next		


	# Return the head of the updated(sorted) linked list
	pass
P9:Delete Kth Node From End
def removeKthNode(head, k):
    # Write your code here.
    fastp = head

    slowp = head

    for i in range(k):

        fastp = fastp.next

    if fastp is None:

        return head.next

    while fastp.next is not None:

        fastp = fastp.next

        slowp = slowp.next

    delnode = slowp.next

    slowp.next = slowp.next.next

    delnode = None

    return head
                
    pass
P10:Detect and Remove Loop
from typing import *

# Following is the structure of  Node
# Do not update or change the structure 

class Node:

    def __init__(self, val):
        self.val = val
        self.next = None

def removeLoop(head :Node) -> Node :

    # Write your code
    slowp = head

    fastp = head

    while fastp is not None and fastp.next is not None:

        slowp = slowp.next

        fastp = fastp.next.next

        if slowp == fastp:

            slowp = head

            while slowp.next != fastp.next:

                slowp = slowp.next

                fastp = fastp.next

            fastp.next = None    
            
    pass
P10:Swap Nodes in Pairs
def pairsSwap(head):

    # Write your code here.        
    if head is None or head.next is None:

        return head

    else:    

        p1, p2 = head, head.next

        p1.next = pairsSwap(p2.next)

        p2.next = p1    

    return p2
P10:Segregate Odd-Even
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None



def segregateOddEven(head):

    # Write your code here.
    new_node = Node(0)

    nh = new_node

    even = Node(0)

    eh = even

    temp = head

    while(temp):

      if temp.data % 2 != 0:

        new_node.next = temp

        new_node = new_node.next

      else:

        even.next = temp

        even = even.next

      temp = temp.next

    even.next = None    

    new_node.next = eh.next

    return nh.next  


    pass
P11:Append Nodes
class Node:
    def __init__(self, data):
       	self.data = data
        self.next = None

def insertNode(prev, newNode):

    newNode.next = prev.next

    prev.next = newNode        

def addNodes(head, n, m):
    # Write your code here.
    total = n + m

    position = 0

    nodeSum = None

    curr = prev = head

    while curr:

        if position % total >= m:

            if nodeSum is not None:

                nodeSum += curr.data

            else:

                nodeSum = curr.data

        if position != 0 and position % total == 0:

            newNode = Node(nodeSum)

            insertNode(prev, newNode)

            nodeSum = None

        position += 1

        prev = curr

        curr = curr.next

    if nodeSum is not None:

        prev.next = Node(nodeSum)

    return head

    pass



