P1: Check Permutation
def areAnagram(str1, str2):
    # Write your code here.

    cnt1 = {}

    cnt2 = {}


    if len(str1) != len(str2):
        return 0

    for char in str1:

        cnt1[char] = cnt1.get(char,0) + 1

    for char in str2:

        cnt2[char] = cnt2.get(char,0) + 1

    if cnt1 == cnt2:

        return 1

    return 0      
P2: Intersection Of Two Sorted Arrays
def findArrayIntersection(arr: list, n: int, brr: list, m: int):
    # Write your code here
    i = 0

    j = 0

    result = []

    while i<len(arr) and j<len(brr):

        if arr[i] == brr[j]:

            result.append(arr[i])

            i += 1

            j += 1

        elif arr[i] < brr[j]:

            i += 1

        else:

            j += 1

    if result != 0:

        return result

    else:

        return -1    



       
    # Return a list containing all the common elements in arr and brr.
    pass
P4:Counting Sort
def sort(n: int, arr: List[int]) -> List[int]:
    # writw your code here
    max_val = max(arr)

    min_val = min(arr)

    cnt_arr = [0] * (max_val-min_val+1)

    for i in range(n):

        cnt_arr[arr[i]-min_val] += 1


    for i in range(1, len(cnt_arr)):

        cnt_arr[i] += cnt_arr[i - 1]

    output_arr = [0]*n    

    for i in range(len(arr) - 1, -1, -1):

        output_arr[cnt_arr[arr[i]-min_val] - 1] = arr[i]

        cnt_arr[arr[i]-min_val] -= 1

    return output_arr        


    pass
P5:Rotate matrix to the right
def rotateMatRight(mat, n, m, k):
	# Write your code here.
	temp = [0]*m
    
	res = []

	k = k%m

	for i in range(0,n):

		for t in range(0, m-k):

			temp[t] = mat[i][t]

		for j in range(m-k,m):

			mat[i][j-m+k] = mat[i][j]

		for j in  range(k,m):

			mat[i][j] = temp[j-k]

		for j in range(m):

			res.append(mat[i][j])

        
	return res

	pass
P7:Sum of Two Elements Equals the Third.
def findTriplet(arr,n):
	# Write your code here
	arr.sort()

	for i in range(len(arr) - 1, -1,-1):

		left = 0

		right = i-1

		while left < right:

			sum = arr[left] + arr[right]

			if arr[i] == sum:

				return [arr[left], arr[right], arr[i]]

			elif sum < arr[i]:

				left += 1

			else:

				right -= 1

	return []
P8:Maximum Sum Circular Subarray
def maxSubarraySum(arr, n):
	# Write your code here.
	curr_max = arr[0]

	max_so_far = arr[0]

	curr_min = arr[0]

	min_so_far = arr[0]

	sum = 0
	for i in range(n):
		sum += arr[i]

	if n == 1:
		return arr[0]	

	for i in range(1,n):

		curr_max = max(arr[i], curr_max + arr[i])

		max_so_far = max(curr_max, max_so_far)

		curr_min = min(arr[i], curr_min + arr[i])

		min_so_far = min(curr_min, min_so_far)

	if min_so_far == sum:
		return max_so_far	

	ans = max(curr_max, sum-min_so_far)

	return max(max_so_far, sum - min_so_far)	



	pass
P9:Longest Consecutive Sequence
def lengthOfLongestConsecutiveSequence(arr, n):
    # Write your code here.
    s=set()
    ans = 0

    for ele in arr:
        s.add(ele)
    
    for i in range(n):
        if arr[i]-1 not in s:
            j=arr[i]
            while(j in s):
                j += 1

            ans=max(ans,j-arr[i])
    return ans            

    pass
P10: Maximum subarray sum after K concatenation(fail 1 test case - try again)
def maxSubSumKConcat(arr, n, k):

	# Write your code here.
	max_so_far = float('-inf')

	max_ending_here = 0

	for i in range(n*k):

		max_ending_here += arr[i%n]

		max_so_far = max(max_so_far,max_ending_here)

		if max_ending_here < 0:

			max_ending_here = 0

	return max_so_far	
P12:Multiply Strings
def multiplyStrings(a, b):
    # Write your code here
    a = [int(digit) for digit in a][::-1]

    b = [int(digit) for digit in b][::-1]

    result = [0]*(len(a)+len(b))

    for i,digit2 in enumerate(b):

        carry = 0

        for j,digit1 in enumerate(a):

            product = digit1*digit2 + carry + result[i+j]

            carry = product//10

            result[i+j] = product%10

        result[i+len(a)] = carry

    while len(result)>1 and result[-1] == 0:

        result.pop()

    result = result[::-1]    

    return "".join(str(digit) for digit in result)            


    # Return the product of both given numbers
    pass





	pass
P14:Missing and repeating numbers
def missingAndRepeating(arr, n):
    # Write your code here
    sn = n*(n+1)//2

    s2n = n*(n+1)*(2*n+1)//6

    s, s2 = 0, 0

    for i in range(n):

        s += arr[i]

        s2 += arr[i]*arr[i]

    val1 = s-sn

    val2 = s2-s2n

    val2 = val2 // val1

    x = val1 + val2 // 2

    y = x - val1

    return x, y
        
    pass
