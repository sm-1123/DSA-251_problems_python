#P1:Sum Of Zeroes

from os import *
from sys import *
from collections import *
from math import *

def coverageOfMatrix(mat):
    # Write your code here.

    cvg = 0

    rows = len(mat)

    clms = len(mat[0])

    for i in range(rows):

        for j in range(clms):

            if mat[i][j] == 0:


                if j > 0 and mat[i][j-1] == 1:

                    cvg += 1

                if j < clms-1 and mat[i][j+1] == 1:

                    cvg += 1

                if i > 0 and mat[i-1][j] == 1:

                    cvg += 1

                if i < rows-1 and mat[i+1][j] == 1:

                    cvg += 1

    return cvg                           


    
    pass

#P2:Matrix Is Symmetric

def isMatrixSymmetric(matrix):
    # Write your code here.  
    rows = len(matrix)

    clms = len(matrix[0])

    if rows != clms:

        return False

    for i in range(rows):

        for j in range(clms):

            if(matrix[i][j] != matrix[j][i]):

                return False

    return True    

#P3:Inplace rotate matrix 90 degree

def inplaceRotate(inputArray, n):

    # Write your code here.

    for i in range(n):

        inputArray[i].reverse()
    
    for i in range(n):

        for j in range(i,n):

            inputArray[i][j], inputArray[j][i] = inputArray[j][i], inputArray[i][j]

    return inputArray        

#P4:Set Matrix Zeros

def setZeros(matrix: List[List[int]]) -> None:
	# Write your code here.

    col0 = False
    row0 = False

    n = len(matrix)
    m = len(matrix[0])

    for i in range(n):
        for j in range(m):
            if matrix[i][j] == 0:
                if i == 0: row0 = True
                if j == 0: col0 = True
                matrix[i][0] = 0
                matrix[0][j] = 0

    for i in range(1, n):
        for j in range(1, m):
            if matrix[i][0] == 0 or matrix[0][j] == 0:
                matrix[i][j] = 0

    if row0:
        for j in range(m):
            matrix[0][j] = 0

    if col0:
        for i in range(n):
            matrix[i][0] = 0

    return matrix
    
