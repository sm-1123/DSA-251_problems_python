---------------------date:01/06/2024----------------------------------------------
P1:Connect N Ropes With Minimum Cost[TC:O(nlogn),SC:O(N)]
import heapq
from sys import stdin,setrecursionlimit
setrecursionlimit(10**7)

def connectRopes( arr, n) :
    heapq.heapify(arr)
    res = 0
    while(len(arr) > 1):
        first = heapq.heappop(arr)

        second = heapq.heappop(arr)

        res += first + second
        heapq.heappush(arr, first + second)
    return res
P2: K-th Largest Sum Subarray[TC:O(n^2logk),SC:O(n)]---TRY AGAIN---GFG
import heapq

def getKthLargest(arr, k):
    n = len(arr)
    sum = []
    sum.append(0)
    sum.append(arr[0])
    for i in range(2, n + 1):
        sum.append(sum[i - 1] + arr[i - 1])

    Q = []
    heapq.heapify(Q)
    for i in range(1, n+1):
        for j in range(i, n+1):
            x = sum[j] + sum[i-1]
            if len(Q) < k:
                heapq.heapppush(Q, x)

            else:
                if Q[0]<x:
                    heapq.heappop(Q)
                    heapq.heappush(Q, x)
    return Q[0]										
	#	Write your code here.

P3:Convert Min-Heap to Max-Heap[TC:O(N),SC:O(logn)]
from sys import stdin

def max_heapify(arr, n, i):

    largest = i

    left_child = 2 * i + 1

    right_child = 2 * i + 2

    if left_child < n and arr[left_child] > arr[largest]:

        largest = left_child

    if right_child < n and arr[right_child] > arr[largest]:

        largest = right_child

    if largest != i:

        arr[i], arr[largest] = arr[largest], arr[i]

        max_heapify(arr, n, largest)         

def minHeapToMaxHeap(arr, n) :

    for i in range((n//2) - 1, -1, -1):

        max_heapify(arr, n, i)
    #Write your code from here
