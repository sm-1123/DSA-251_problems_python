------------------date:30/05/2024---------------------------------------------------------
P1:Maximum in Subarrays of length K[TC:O(N - K),SC:O(K)]
def printSubarrayMax(arr, n, k) :
	# write your code here
    Q = deque()

    for i in range(k):

        while Q and arr[i] >= arr[Q[-1]]:

            Q.pop()

        Q.append(i)

    for i in range(k, n):

        if Q:

            print(arr[Q[0]], end=" ")

        while Q and Q[0] <= i - k:

            Q.popleft()

        while Q and arr[i] >= arr[Q[-1]]:

            Q.pop()

        Q.append(i) 

    if Q:

        print(arr[Q[0]])     
------------------------date:31/05/2024-------------------------------------------------------
P2:Sliding Maximum[TC:O(N) + O(N) == O(N), SC:O(K)]
from collections import deque

def maxSlidingWindow(arr, n, k):

    Q = deque()

    ans = []

    for i in range(n):

        if Q and Q[0] == i - k:

            Q.popleft()

        while Q and arr[Q[-1]] <= arr[i]:

            Q.pop()

        Q.append(i)

        if i >= k-1:

            ans.append(arr[Q[0]])

    return ans
            
    # Write your code here.
    pass

P3:Implement Deque
class Deque:
    def __init__(self, size):
        # Write your code here
        self.n = size

        self.q = [-1] * size

        self.f = -1

        self.b = -1

        pass

    # Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    def pushFront(self, x):

        if self.isFull():

            return False

        if self.isEmpty():

            self.f = self.b = 0

        else:

            self.f = (self.f - 1 + self.n)%self.n

        self.q[self.f] = x

        return True

        # Write your code here
        pass

    # Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    def pushRear(self, x):

        if self.isFull():

            return False

        if self.isEmpty():

            self.f = self.b = 0

        else:

            self.b = (self.b + 1)%self.n

        self.q[self.b] = x

        return True

        # Write your code here
        pass

    # Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    def popFront(self):

        if self.isEmpty():

            return -1

        x = self.q[self.f]

        if self.f == self.b:

            self.f = self.b = -1

        else:

            self.f = (self.f + 1)%self.n

        return x

        # Write your code here
        pass

    # Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    def popRear(self):

        if self.isEmpty():

            return -1

        x = self.q[self.b]

        if self.f == self.b:

            self.f = self.b = -1

        else:

            self.b = (self.b - 1 + self.n)%self.n

        return x 

        # Write your code here
        pass

    # Returns the first element of the deque. If the deque is empty, it returns -1.
    def getFront(self):

        if self.isEmpty():

            return -1

        return self.q[self.f]

        # Write your code here
        pass

    # Returns the last element of the deque. If the deque is empty, it returns -1.
    def getRear(self):

        if self.isEmpty():

            return -1

        return self.q[self.b]

        # Write your code here
        pass

    # Returns true if the deque is empty. Otherwise returns false.
    def isEmpty(self):

        return self.f == -1
        # Write your code here
        pass

    # Returns true if the deque is full. Otherwise returns false.
    def isFull(self):

        return (self.b + 1)%self.n == self.f
        
        # Write your code here
        pass

P4:Anagram Substring Search[TC:O(256 * (N - M) + M),SC:O(M)-----M=256]
MAX = 256

def compare(arr1, arr2):

    for i in range(MAX):

        if arr1[i] != arr2[i]:

            return False

    return True    

def findAnagramsIndices(n, m, st, ptr):

    countST = [0] * 256

    countPTR = [0] * 256

    for i in range(m):

        countPTR[ord(ptr[i])] += 1

    ans = []    

    for i in range(n):

        countST[ord(st[i])] += 1    

        if i >= m:

            countST[ord(st[i - m])] -= 1

        if compare(countST, countPTR):

            ans.append(i - m + 1)        
    # Write your code here.
    # Print the number of anagram indices found
    for index in ans:
        print(index, end=" ")
    print()    

P5:Longest Substring Without Repeating Characters[TC:O(N),SC:O(N)]
def uniqueSubstrings(input ) :
    # Write your code here.
    mpp = [-1] * 256

    left = 0

    right = 0

    n = len(input)

    length = 0

    while right < n:

        if mpp[ord(input[right])] != -1:

            left = max(mpp[ord(input[right])] + 1, left)

        mpp[ord(input[right])] = right

        length = max(length, right - left + 1)

        right += 1

    return length        
