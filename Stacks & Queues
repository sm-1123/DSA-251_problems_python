P1:Stack Implementation Using Array
class Stack:
    def __init__(self, n: int):
        # Write your code here
        self.items = []

        self.capacity = n

        pass

    def push(self, num: int):
        # Write your code here
        if not self.isFull():

            self.items.append(num)

        pass

    def pop(self) -> int:
        # Write your code here
        if not self.isEmpty():

            return self.items.pop()

        else:

            return -1

        pass

    def top(self) -> int:
        # Write your code here
        if not self.isEmpty():

            return self.items[-1]

        else: 
            
            return -1

        pass

    def isEmpty(self) -> int:
        # Write your code here
        if len(self.items) == 0:

            return 1

        else:

            return 0   

        pass

    def isFull(self) -> int:
        # Write your code here
        if len(self.items) == self.capacity:

            return 1

        else:

            return 0

        pass
P2:Implement Stack With Linked List
class Node:
    def __init__(self, data, next_node=None):
        self.data = data
        self.next = next_node

class Stack:
    # Write your code here
    def __init__(self):
    # Write your code here
        self.head = None

        self.size = 0

        pass
        
    def getSize(self):
        # Write your code here
        return self.size

        pass

    def isEmpty(self):
        # Write your code here
        return self.head is None

        pass

    def push(self, data):
        # Write your code here
        newNode = Node(data)

        newNode.next = self.head

        self.head = newNode

        self.size += 1

        pass

    def pop(self):
        # Write your code here
        if self.head is None:

            return None

        data = self.head.data

        self.head = self.head.next

        self.size -= 1

        return data

        pass
    def getTop(self):
        # Write your code here
        if self.head is None:

            return None

        else:

            return self.head.data
                
        pass
P3:Implement a Queue[1 test case failled]
class Node:

    def __init__(self, data):

        self.data = data

        self.next = None

class Queue :

    #Define data members and __init__()
    def __init__(self):

        self.head = None




    '''----------------- Public Functions of Queue -----------------'''

   
    def isEmpty(self) :
        #Implement the isEmpty() function
        if self.head is None:

            return True

        return False   



    def enqueue(self, data) :
        #Implement the enqueue(element) function
        newNode = Node(data)

        if self.head is None:

            self.head = newNode

        else:    

            curr = self.head

            while curr.next is not None:

                curr = curr.next

            curr.next = newNode

            
    def dequeue(self) :
        #Implement the dequeue() function
        if self.head is None:

            return -1

        ans = self.head.data

        self.head = self.head.next

        return ans    

    def front(self) :
        #Implement the front() function
        if self.head is None:

            return -1

        return self.head.data    
P4:Queue Using Two Stacks
class Queue:
    # Stacks to be used in the operations.
    def __init__(self):
        self.stk1 = []
        self.stk2 = []

    # Enqueues 'X' into the queue. Returns true after enqueuing.
    def enqueue(self, X):
        # Write your code here
        while self.stk1:

            self.stk2.append(self.stk1.pop())

        self.stk1.append(X)

        while self.stk2:

            self.stk1.append(self.stk2.pop())

        return True        

    pass

    """
      Dequeues top element from queue. Returns -1 if the queue is empty, 
      otherwise returns the popped element.
    """
    def dequeue(self):
        # Write your code here
        if len(self.stk1) == 0:

            return -1

        X = self.stk1[-1]

        self.stk1.pop()

        return X    


        pass
P5:Stack using queue
from typing import List
from _collections import deque

class Stack:
    def __init__(self):
        # Define the data members.
        self.q = deque()

        pass

    def getSize(self) -> int:
        # Implement the getSize() function.
        return len(self.q)

        pass

    def isEmpty(self) -> bool:
        # Implement the isEmpty() function.
        return len(self.q) == 0

        pass

    def push(self, element: int) -> None:
        # Implement the push() function.
        s = len(self.q)

        self.q.append(element)

        for i in range(s):

            self.q.append(self.q.popleft())

        pass

    def pop(self) -> int:
        # Implement the pop() function.
        if not self.q :

            return -1

        return self.q.popleft()    

        pass

    def top(self) -> int:
        # Implement the top() function.
        if self.isEmpty():

            return -1

        return self.q[0]

        pass
P6:Min Stack
class minStack:

	# Write your code here.
			
    # Constructor
    def __init__(self):
        # Write your code here.
        self.Stack = []

        self.Min = []

        pass
    
    # Function to add another element equal to num at the top of stack.
    def push(self, num: int) -> None:
        # Write your code here.
        self.Stack.append(num)

        if not self.Min or num <= self.Min[-1]:

            self.Min.append(num)

        pass
    
    # Function to remove the top element of the stack.
    def pop(self) -> int:
        # Write your code here.
        if self.Stack:

            temp = self.Stack.pop()

            if self.Min and self.Min[-1] == temp:

                self.Min.pop()

            return temp

        return -1

        pass
    
    # Function to return the top element of stack if it is present. Otherwise return -1.
    def top(self) -> int:
        # Write your code here.
        if self.Stack:

            return self.Stack[-1]

        return -1

        pass
    
    # Function to return minimum element of stack if it is present. Otherwise return -1.
    def getMin(self) -> int:
        # Write your code here.
        if self.Min:

            return self.Min[-1]

        return -1
            
        pass
P7:Next Greater Element
def nextGreater(arr,n):

    nge = [-1] * n

    stk = []
    
    #Your code goes here

    for i in range(2 * n - 1, -1, -1):

        while stk and stk[-1] <= arr[i % n]:

            stk.pop()

        if i < n:

            if stk:

                nge[i] = stk[-1]

            stk.append(arr[i % n])

    return nge    




