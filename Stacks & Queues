P1:Stack Implementation Using Array
class Stack:
    def __init__(self, n: int):
        # Write your code here
        self.items = []

        self.capacity = n

        pass

    def push(self, num: int):
        # Write your code here
        if not self.isFull():

            self.items.append(num)

        pass

    def pop(self) -> int:
        # Write your code here
        if not self.isEmpty():

            return self.items.pop()

        else:

            return -1

        pass

    def top(self) -> int:
        # Write your code here
        if not self.isEmpty():

            return self.items[-1]

        else: 
            
            return -1

        pass

    def isEmpty(self) -> int:
        # Write your code here
        if len(self.items) == 0:

            return 1

        else:

            return 0   

        pass

    def isFull(self) -> int:
        # Write your code here
        if len(self.items) == self.capacity:

            return 1

        else:

            return 0

        pass
P2:Implement Stack With Linked List
class Node:
    def __init__(self, data, next_node=None):
        self.data = data
        self.next = next_node

class Stack:
    # Write your code here
    def __init__(self):
    # Write your code here
        self.head = None

        self.size = 0

        pass
        
    def getSize(self):
        # Write your code here
        return self.size

        pass

    def isEmpty(self):
        # Write your code here
        return self.head is None

        pass

    def push(self, data):
        # Write your code here
        newNode = Node(data)

        newNode.next = self.head

        self.head = newNode

        self.size += 1

        pass

    def pop(self):
        # Write your code here
        if self.head is None:

            return None

        data = self.head.data

        self.head = self.head.next

        self.size -= 1

        return data

        pass
    def getTop(self):
        # Write your code here
        if self.head is None:

            return None

        else:

            return self.head.data
                
        pass
P3:Implement a Queue[1 test case failled]
class Node:

    def __init__(self, data):

        self.data = data

        self.next = None

class Queue :

    #Define data members and __init__()
    def __init__(self):

        self.head = None




    '''----------------- Public Functions of Queue -----------------'''

   
    def isEmpty(self) :
        #Implement the isEmpty() function
        if self.head is None:

            return True

        return False   



    def enqueue(self, data) :
        #Implement the enqueue(element) function
        newNode = Node(data)

        if self.head is None:

            self.head = newNode

        else:    

            curr = self.head

            while curr.next is not None:

                curr = curr.next

            curr.next = newNode

            
    def dequeue(self) :
        #Implement the dequeue() function
        if self.head is None:

            return -1

        ans = self.head.data

        self.head = self.head.next

        return ans    

    def front(self) :
        #Implement the front() function
        if self.head is None:

            return -1

        return self.head.data    



