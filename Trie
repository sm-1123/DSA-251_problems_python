------------------date:29/05/1014-------------------------------------------------
P1:Maximum XOR of Two Numbers in an Array[TC:O(32N + 32N),SC:O(32N)]
from typing import List

class Node:

    def __init__(self):

        self.links = [None, None] #array to store links to child nodes 0 and 1
    
    def containsKey(self, bit):

        return self.links[bit] is not None

    def get(self, bit):

        return self.links[bit]

    def put(self, bit, node):

        self.links[bit] = node 

class Trie:

    def __init__(self):

        self.root = Node()

    def insert(self, num):

        node = self.root

        for i in range(31, -1, -1):

            bit = (num>>i)&1

            if not node.containsKey(bit):

                node.put(bit, Node())

            node = node.get(bit)    

    def get_max(self, num):

        node = self.root

        max_num = 0

        for i in range(31, -1, -1):

            bit = (num>>i)&1

            if node.containsKey(1 - bit):

                max_num |= (1 << i)

                node = node.get(1 - bit)

            else:

                node = node.get(bit)    

        return max_num        



def maximumXor(A: List[int]) -> int:

    trie = Trie()

    for num in A:

        trie.insert(num)

    maxi = 0

    for num in A:

        maxi = max(maxi, trie.get_max(num))

    return maxi        

P2:Number Of Distinct Substring[TC:O(N * N)]
class Node:

    def __init__(self):

        self.links = [None] * 26

    def containsKey(self, ch):

        return self.links[ord(ch) - ord('a')] is not None

    def get(self, ch):

        return self.links[ord(ch) - ord('a')]

    def put(self, ch, node):

        self.links[ord(ch) - ord('a')] = node



def distinctSubstring(word):
    # Write your code here.
    root = Node()

    cnt = 0

    n = len(word)

    for i in range(n):

        node = root

        for j in range(i, n):

            if not node.containsKey(word[j]):

                node.put(word[j], Node())

                cnt += 1

            node = node.get(word[j])

    return cnt
                
    pass
---------------------------------date:30/05/2024------------------------------------------------------------------------------
P3: Implement Trie ll[TC:O(n),SC:O(n)]
class Node:

    def __init__(self):

        self.links = [None] * 26

        self.cntEndWith = 0

        self.cntPrefix = 0

    def contains_key(self, ch):

        return self.links[ord(ch) - ord('a')] is not None

    def get(self, ch):

        return self.links[ord(ch) - ord('a')]

    def put(self, ch, node):

        self.links[ord(ch) - ord('a')] = node

    def increaseEnd(self):

        self.cntEndWith += 1

    def increase_prefix(self):

        self.cntPrefix += 1

    def delete_end(self):

        self.cntEndWith -= 1

    def reduce_prefix(self):

        self.cntPrefix -= 1                            

class Trie:
    def __init__(self):
        # Write your code here.
        self.root = Node()

        pass

    def insert(self, word):
        # Write your code here.
        node = self.root

        for ch in word:

            if not node.contains_key(ch):

                node.put(ch, Node())

            node = node.get(ch)

            node.increase_prefix()    

        node.increaseEnd()

        pass

    def countWordsEqualTo(self, word):

        node = self.root

        for ch in word:

            if node.contains_key(ch):

                node = node.get(ch)

            else:    
                
                return 0

        return node.cntEndWith        

    def countWordsStartingWith(self, word):

        node = self.root

        for ch in word:

            if node.contains_key(ch):

                node = node.get(ch)

            else:

                return 0

        return node.cntPrefix


    def erase(self, word):
        # Write your code here.
        node = self.root

        for ch in word:

            if node.contains_key(ch):

                node = node.get(ch)

                node.reduce_prefix()

            else:

                return 

        node.delete_end()
           
        pass
