P1:Check Subset[TC-O(nlogn + mlogm),SC-O(1)]
def checkSubset(arr1, arr2, n, m):
    # Write your code here.    
    arr1.sort()

    arr2.sort()

    i = 0

    j = 0

    while(i < n and  j < m):

        if arr2[j] < arr1[i]:

            return False

        if arr1[i] == arr2[j]:

            i += 1

            j += 1

        else:

            i += 1    

    if j >= m:

        return True            

    pass
P2:LCA of three Nodes[TC:O(N),SC:O(N)]
def helper(root, node1, node2, node3):

    if root is None:

        return None

    if node1 == root.data or node2 == root.data or node3 == root.data:

        return root    

    left = helper(root.left, node1, node2, node3)

    right = helper(root.right, node1, node2, node3)

    if left is None and right is None:

        return None

    if left and right:

        return root

    if left:

        return left

    return right                        


def lcaOfThreeNodes(root, node1, node2, node3):
    
    # Write your code here

    sys.setrecursionlimit(10**6)  

    temp = helper(root, node1, node2, node3)

    if temp:

        return temp.data

    return -1

    pass
P3:Remove BST keys outside the given range[TC:O(N),SC:O(H)]
def removeOutsideRange(root, min, max):
    # write yout code here
    if root is None:

        return None

    root.left = removeOutsideRange(root.left, min, max)

    root.right = removeOutsideRange(root.right, min, max)

    if root.data < min:

        rchild = root.right

        return rchild

    if root.data > max:

        lchild = root.left

        return lchild

    return root
P4:Search In A Row Wise And Column Wise Sorted Matrix[TC:O(N + M),SC:O(1)]
def search(matrix, x):
    # Write your code here.
    n = len(matrix[0])

    i, j = 0, n - 1

    while i < n and j >= 0:

        if matrix[i][j] == x:

            return [i, j]

        elif matrix[i][j] < x:

            i += 1    

        else:

            j -= 1

    return [-1,-1] 

    pass
P5:Palindrome Linked List[TC:O(N),SC:O(1)]
def isPalindrome(head):
    
    # Write your code here.
    def reversed_ll(node):

        prev = None

        while node:

            temp = node.next

            node.next = prev

            prev = node

            node = temp

        return prev    

    slow = head

    fast = head

    while fast and fast.next:

        slow = slow.next

        fast = fast.next.next

    if fast:

        slow = slow.next

    slow = reversed_ll(slow)

    while slow:

        if head.data != slow.data:

            return False

        slow = slow.next

        head = head.next

    return True        
P6:BST Iterator
class BSTiterator:[TC:O(1),SC:O(H)]
    def __init__(self, root):
        # Complete the constructor function
        self.stk = []

        while root:

            self.stk.append(root)

            root = root.left

        pass

    def next(self):
        # Complete the functiom
        res = self.stk.pop()   

        curr = res.right

        while curr:

            self.stk.append(curr)

            curr = curr.left

        return res.data

        pass

    def hasNext(self):
        # Complete the function
        return self.stk != []


