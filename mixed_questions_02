P1:Check Subset[TC-O(nlogn + mlogm),SC-O(1)]
def checkSubset(arr1, arr2, n, m):
    # Write your code here.    
    arr1.sort()

    arr2.sort()

    i = 0

    j = 0

    while(i < n and  j < m):

        if arr2[j] < arr1[i]:

            return False

        if arr1[i] == arr2[j]:

            i += 1

            j += 1

        else:

            i += 1    

    if j >= m:

        return True            

    pass
P2:LCA of three Nodes[TC:O(N),SC:O(N)]
def helper(root, node1, node2, node3):

    if root is None:

        return None

    if node1 == root.data or node2 == root.data or node3 == root.data:

        return root    

    left = helper(root.left, node1, node2, node3)

    right = helper(root.right, node1, node2, node3)

    if left is None and right is None:

        return None

    if left and right:

        return root

    if left:

        return left

    return right                        


def lcaOfThreeNodes(root, node1, node2, node3):
    
    # Write your code here

    sys.setrecursionlimit(10**6)  

    temp = helper(root, node1, node2, node3)

    if temp:

        return temp.data

    return -1

    pass
P3:Remove BST keys outside the given range[TC:O(N),SC:O(H)]
def removeOutsideRange(root, min, max):
    # write yout code here
    if root is None:

        return None

    root.left = removeOutsideRange(root.left, min, max)

    root.right = removeOutsideRange(root.right, min, max)

    if root.data < min:

        rchild = root.right

        return rchild

    if root.data > max:

        lchild = root.left

        return lchild

    return root

