P1:Check Subset[TC-O(nlogn + mlogm),SC-O(1)]
def checkSubset(arr1, arr2, n, m):
    # Write your code here.    
    arr1.sort()

    arr2.sort()

    i = 0

    j = 0

    while(i < n and  j < m):

        if arr2[j] < arr1[i]:

            return False

        if arr1[i] == arr2[j]:

            i += 1

            j += 1

        else:

            i += 1    

    if j >= m:

        return True            

    pass
P2:LCA of three Nodes[TC:O(N),SC:O(N)]
def helper(root, node1, node2, node3):

    if root is None:

        return None

    if node1 == root.data or node2 == root.data or node3 == root.data:

        return root    

    left = helper(root.left, node1, node2, node3)

    right = helper(root.right, node1, node2, node3)

    if left is None and right is None:

        return None

    if left and right:

        return root

    if left:

        return left

    return right                        


def lcaOfThreeNodes(root, node1, node2, node3):
    
    # Write your code here

    sys.setrecursionlimit(10**6)  

    temp = helper(root, node1, node2, node3)

    if temp:

        return temp.data

    return -1

    pass
P3:Remove BST keys outside the given range[TC:O(N),SC:O(H)]
def removeOutsideRange(root, min, max):
    # write yout code here
    if root is None:

        return None

    root.left = removeOutsideRange(root.left, min, max)

    root.right = removeOutsideRange(root.right, min, max)

    if root.data < min:

        rchild = root.right

        return rchild

    if root.data > max:

        lchild = root.left

        return lchild

    return root
P4:Search In A Row Wise And Column Wise Sorted Matrix[TC:O(N + M),SC:O(1)]
def search(matrix, x):
    # Write your code here.
    n = len(matrix[0])

    i, j = 0, n - 1

    while i < n and j >= 0:

        if matrix[i][j] == x:

            return [i, j]

        elif matrix[i][j] < x:

            i += 1    

        else:

            j -= 1

    return [-1,-1] 

    pass
P5:Palindrome Linked List[TC:O(N),SC:O(1)]
def isPalindrome(head):
    
    # Write your code here.
    def reversed_ll(node):

        prev = None

        while node:

            temp = node.next

            node.next = prev

            prev = node

            node = temp

        return prev    

    slow = head

    fast = head

    while fast and fast.next:

        slow = slow.next

        fast = fast.next.next

    if fast:

        slow = slow.next

    slow = reversed_ll(slow)

    while slow:

        if head.data != slow.data:

            return False

        slow = slow.next

        head = head.next

    return True        
P6:BST Iterator
class BSTiterator:[TC:O(1),SC:O(H)]
    def __init__(self, root):
        # Complete the constructor function
        self.stk = []

        while root:

            self.stk.append(root)

            root = root.left

        pass

    def next(self):
        # Complete the functiom
        res = self.stk.pop()   

        curr = res.right

        while curr:

            self.stk.append(curr)

            curr = curr.left

        return res.data

        pass

    def hasNext(self):
        # Complete the function
        return self.stk != []
----------------------------------------------------DATE:22/05/2024---------------------------------------------------------
P7:Flatten Binary Tree to Linked List[TC:O(N),SC:O(1)]
def flattenBinaryTree(root):
    # Write your code here.
    curr = root

    while(curr):

        if curr.left:

            prev = curr.left

            while(prev.right):

                prev = prev.right

            prev.right = curr.right

            curr.right = curr.left

        curr = curr.right        

    return root    

P8:Rearrange Linked List[TC:O(N),SC:O(1)]
def rearrangeList(head):
    # Write your code here.
    if not head or not head.next:

        return head    

    def reversed_ll(node):

        prev = None

        while node:

            temp = node.next

            node.next = prev

            prev = node

            node = temp

        return prev

    slow, fast = head, head

    while fast and fast.next:

        slow = slow.next

        fast = fast.next.next

    node2 = reversed_ll(slow.next)

    slow.next = None

    node1 = head

    dummy = Node(0)

    curr = dummy

    while(node1 or node2):

        if node1:

            curr.next = node1

            curr = curr.next

            node1 = node1.next

        if node2:

            curr.next = node2

            curr = curr.next

            node2 = node2.next             

    return dummy.next
    
    pass

P9: Sorted Linked List to Balanced BST[TC:O(N), SC:O(N)]
def fnc(arr, l, r):

	if l > r:

		return None

	mid = (l + r)//2

	node = Node(arr[mid])

	node.left = fnc(arr, l, mid - 1)

	node.right = fnc(arr, mid + 1, r)

	return node	

def sortedListToBST(head):

	arr = []

	while head:

		arr.append(head.data)

		head = head.next

	return fnc(arr, 0, len(arr) - 1)



	''' 
		Write your code here
		Return the root of balanced BST
		Verdict: 'CORRECT' or 'INCORRECT'
	'''
	pass
----------------------------date:23/5/2024--------------------------------------------------------
P10:Merge Two BSTs[TC:O(M + N),SC:O(log(M + N)]
def inOrder(root, bst):

    if root is None:

        return

    inOrder(root.left, bst)

    bst.append(root.data)

    inOrder(root.right, bst)            

def mergeArrays(a, b):

    i, j = 0, 0

    ans = []

    while i < len(a) and j < len(b):

        if a[i] < b[j]:

            ans.append(a[i])

            i += 1

        else:

            ans.append(b[j])

            j += 1

    while i < len(a):

        ans.append(a[i])

        i += 1

    while j < len(b):

        ans.append(b[j])

        j += 1

    return ans    

def buildBst(nums, start, end):

    if start > end:

        return

    mid = (start + end)//2

    root = TreeNode(nums[mid])

    root.left = buildBst(nums, start, mid - 1)

    root.right = buildBst(nums, mid + 1, end)

    return root    

def mergeBST(root1, root2):
	# Write your code here.
    bst1 = []

    bst2 = []

    inOrder(root1, bst1)

    inOrder(root2, bst2)

    mergeSort = mergeArrays(bst1, bst2)

    return buildBst(mergeSort, 0, len(mergeSort) - 1)

P11:Merge Two Binary Trees[TC:O(N),SC:O(N)]
def mergeTrees(root1, root2):
    # Write your code here.
    if root1 == None:

        return root2

    if root2 == None:

        return root1

    root1.data = root1.data + root2.data

    root1.left = mergeTrees(root1.left, root2.left)

    root1.right = mergeTrees(root1.right, root2.right)

    return root1

--------------------------------date:24/05/2024---------------------------------------------
P12:Sort a Stack[TC:O(N^2),SC: O(N)]------Try again
def insert_correct_position(x, stack):

    if len(stack) == 0 or stack[-1] < x:

        stack.append(x)

    else:

        a = stack[-1]

        stack.pop()

        insert_correct_position(x, stack)

        stack.append(a)    

def reverse(stack):

    if len(stack) > 0:

        x = stack[-1]

        stack.pop()

        reverse(stack)

        insert_correct_position(x, stack)



def sortStack(stack):

    reverse(stack)

P13:Boundary Traversal of Binary Tree[TC:O(N),SC:O(N)]
def isLeaf(root):

    return not root.left and not root.right

def addLeftNode(root, res):

    curr = root.left

    while curr:

        if not isLeaf(curr):

            res.append(curr.data)

        if curr.left:

            curr = curr.left

        else:

            curr = curr.right

def addRightNode(root, res):

    temp = []

    curr = root.right

    while curr:

        if not isLeaf(curr):

            temp.append(curr.data)

        if curr.right:

            curr = curr.right

        else:

            curr = curr.left

    for i in range(len(temp) - 1, -1, -1):

        res.append(temp[i])

def addLeaves(root, res):

    if isLeaf(root):

        res.append(root.data)

        return

    if root.left:

        addLeaves(root.left, res)

    if root.right:

        addLeaves(root.right, res)                                

def traverseBoundary(root):
    # Write your code here.
    res = []

    if not root:

        return res

    if not isLeaf(root):

        res.append(root.data)

    addLeftNode(root, res)

    addLeaves(root, res)

    addRightNode(root, res)

    return res


    pass
---------------------------date:26/05/2024---------------------------------------------------------
P14: Implementation: HashMap
class myHashMap :

    def __init__(self) :
        # Implement the init method(s).
        self.dict = {}

    def get(self, key) :
        # Implement the get(k) function.
        if key not in self.dict:

            return -1

        return self.dict.get(key)    
    
    def insert(self, key, value) :
        # Implement the insert(k, v) function.
        self.dict[key] = value

    def remove(self, key) :
        # Implement the remove(k) function.
                 if key in self.dict:

                     self.dict.pop(key)
                
    def search(self, key) :
        # Implement the search(k) function.
        for k in self.dict.keys():

            if k == key:

                return True

        return False    

    def getSize(self) :
        # Implement the getSize() function.
        return len(self.dict)    
    
    def isEmpty(self) :
        # Implement the isEmpty(k) function.
        return len(self.dict) == 0
        
-------------------date:27/05/2024---------------------------------------------------------
P15:Copy List with Random Pointer[TC:O(3N),SC:O(N)]
def insertInBetween(head):

    temp = head

    while temp:

        nextElement = temp.next

        copy = LinkedListNode(temp.data)

        copy.next == nextElement

        temp.next = copy

        temp = nextElement

def connectRandomNode(head):

    temp = head

    while temp:

        copyNode = temp.next

        if temp.random:

            copyNode.random = temp.random.next

        else:

            copyNode.random = None

        temp = temp.next.next 

def deepCopyList(head):

    temp = head

    dummyNode = LinkedListNode(-1)

    res = dummyNode

    while temp:

        res.next = temp.next

        res = res.next

        temp.next = temp.next.next

        temp = temp.next     

    return dummyNode.next          

def cloneRandomList(head):
    # Your code goes here.
    if not head:

        return None

    insertInBetween(head)

    connectRandomNode(head)

    return deepCopyList(head)   

P16:Find Nth Root Of M[TC:O(logn),SC:O(1)](STRIVER)
def func(n, m, mid):

    ans = 1

    for i in range(1, n + 1):

        ans *= mid

    if ans > m:

        return 2

    elif ans == m:

        return 1

    return 0            

def NthRoot(n: int, m: int) -> int:
    # Write Your Code Here
    low, high = 1, m

    while low <= high:

        mid = (low + high)//2

        val = func(n, m, mid)

        if val == 1:

            return mid

        elif val == 2:    

            high = mid - 1

        else:

            low = mid + 1

    return -1            

    pass
P17:Size of Largest BST in Binary Tree[TC:O(N),SC:O(1)]
class info:
    def __init__(self):
        self.isValid = True
        self.size = 0
        self.min = 1e9
        self.max = -1e9

def largest(root):

    if root is None:

        return info()

    leftinfo = largest(root.left)

    rightinfo = largest(root.right)

    m = info()

    if (leftinfo.isValid == False or rightinfo.isValid == False) or (leftinfo.max > root.data or rightinfo.min <= root.data):

        m.isValid = False

        m.size = max(leftinfo.size, rightinfo.size)

        return m

    m.isValid = True

    m.size = leftinfo.size + rightinfo.size + 1

    if root.left is not None:

        m.min = leftinfo.min

    else:

        m.min = root.data 

    if root.right is not None:

        m.max = rightinfo.max 

    else:

        m.max = root.data

    return m              

def largestBST(root):

    m = largest(root)

    return m.size

---------------date:28/05/2024---------------------------------------------------
P18:Fractional Knapsack[TC:O(logn + n),SC:O(1)]
def maximumValue(items, n, w):

	items.sort(key = lambda x: x[1] / x[0], reverse = True)

	current_weight = 0

	final_value = 0.0

	for i in range(n):

		if current_weight + items[i][0] <= w:

			current_weight += items[i][0]

			final_value += items[i][1]

		else:

			remain = w - current_weight

			final_value += items[i][1] / items[i][0] * remain

			break

	return final_value			



	# Write your code here.
	# ITEMS contains [weight, value] pairs.
	pass

P19:Gas Tank[TC:O(N),SC:O(1)]
def minimumStartingIndex(gas, cost, n):
    # Write your code here.
    if sum(gas) < sum(cost):

        return -1

    totalSum = 0

    start = 0

    for i in range(n):

        totalSum += gas[i] - cost[i]

        if totalSum < 0:

            totalSum = 0

            start = i + 1

    return start

    pass
